        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:#define MAX_TEST 500
        -:    9:
        2:   10:int main()
        -:   11:{
        -:   12:	struct gameState G;
        -:   13:	int result;
        2:   14:	int random = 0;
        2:   15:	int player = 1;
        -:   16:	int handCount;
        -:   17:	int deckCount;
        2:   18:	int passed = 0;
        2:   19:	int failed = 0;
        -:   20:	int i;
        2:   21:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,	sea_hag, tribute, smithy};
        -:   22:	
        2:   23:    printf (":::: SALVAGER RANDOM TESTER START ::::\n");
        -:   24:	
        -:   25:
     1002:   26:	for(i = 0; i < MAX_TEST; i++)
        -:   27:	{
        -:   28:		//set basic information
     1000:   29:		printf("Try #%d: \n", i);
     1000:   30:		int numPlayers = rand() % 4;
     1000:   31:		int gameSeed = rand() % 5000;
        -:   32:
        -:   33:		//initializes gameState
     1000:   34:		initializeGame(numPlayers, k, gameSeed, &G);
        -:   35:
     1000:   36:		random = rand() % 10;
        -:   37:		
     1000:   38:		if(random == 5)
        -:   39:		{
       86:   40:			G.deckCount[player] = 0;
       86:   41:			deckCount = 0;
        -:   42:		}
        -:   43:		else
        -:   44:		{
      914:   45:			random = rand() % MAX_DECK;
      914:   46:			G.deckCount[player] = random;
      914:   47:			deckCount = random;
        -:   48:		}
        -:   49:
     1000:   50:		random = rand() % MAX_DECK;
     1000:   51:		G.handCount[player] = rand() % MAX_HAND;
     1000:   52:		handCount = random;
        -:   53:
     1000:   54:		G.discardCount[player] = rand() % MAX_DECK;
        -:   55:
     1000:   56:		result = Salvager(&G, player, 1, 1);
        -:   57:		
     1000:   58:		if(result == 0)
        -:   59:		{
     1000:   60:			printf("Test #%d Passed\n", i);
     1000:   61:			passed++;
        -:   62:		}
        -:   63:		else
        -:   64:		{
    #####:   65:			printf("Test #%d Failed\n", i);
    #####:   66:			failed++;
        -:   67:		}
        -:   68:	}
        -:   69:
        2:   70:	printf (":::: SALVAGER RANDOM TESTER END ::::\n");
        -:   71:}

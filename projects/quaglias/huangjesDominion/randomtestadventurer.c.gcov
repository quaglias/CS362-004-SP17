        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:#define MAX_TESTS 100
        -:   11:
function main called 1 returned 100% blocks executed 100%
        1:   12:int main()
        -:   13:{
        1:   14:    printf (":::: ADVENTURER RANDOM TESTER START ::::\n");
call    0 returned 100%
        -:   15:
        -:   16:	struct gameState G;
        -:   17:  	int players1;
        -:   18:  	int players2;
        -:   19:  	int random_seed;
        1:   20:  	int pre_handCount = 0;
        1:   21:  	int post_handCount = 0;
        1:   22:  	int card = 0;
        1:   23:  	int i = 0;
        1:   24:  	int j = 0;
        1:   25:  	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, smithy, sea_hag, tribute};
        -:   26:
      101:   27:    for(i = 0; i < MAX_TESTS; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   28:    {
        -:   29:        //Initialize variables
      100:   30:        players1 = rand() % 4;
call    0 returned 100%
      100:   31:        players2 = rand() % 4;
call    0 returned 100%
      100:   32:        random_seed = rand();
call    0 returned 100%
        -:   33:
      100:   34:        initializeGame(players1, k, random_seed, &G);
call    0 returned 100%
        -:   35:
        -:   36:        //Initialize game state information
      100:   37:        G.deckCount[players2] = rand() % MAX_DECK;
call    0 returned 100%
      100:   38:        G.discardCount[players2] =  rand() % MAX_DECK;
call    0 returned 100%
      100:   39:        G.handCount[players2] =  rand() % MAX_HAND;
call    0 returned 100%
        -:   40:
      100:   41:        G.hand[players2][0] = adventurer;
        -:   42:
    26070:   43:        for(j = 1; j < G.handCount[players2]; j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   44:        {
    25970:   45:            card = rand() % treasure_map;
call    0 returned 100%
    25970:   46:            if(G.supplyCount[card] > -1)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -:   47:            {
    17078:   48:                G.hand[players2][j] = card;
        -:   49:            }
        -:   50:        }
        -:   51:
    23377:   52:        for(j = 0; j < G.deckCount[players2]; j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   53:        {
    23277:   54:            card = rand() % treasure_map;
call    0 returned 100%
    23277:   55:            if(G.supplyCount[card] > -1)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -:   56:            {
    15093:   57:                G.deck[players2][j] = card;
        -:   58:            }
        -:   59:        }
        -:   60:
      100:   61:        pre_handCount = G.handCount[players2];
        -:   62:
        -:   63:
      100:   64:        playCard(0,0,0,0, &G);  //Call adventurer
call    0 returned 100%
        -:   65:
      100:   66:        post_handCount = G.handCount[players2];
        -:   67:
      100:   68:        printf ("handCount prior: %d\n", pre_handCount);
call    0 returned 100%
      100:   69:        printf ("handCount after: %d\n", post_handCount);
call    0 returned 100%
        -:   70:
      100:   71:        if(pre_handCount == post_handCount)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -:   72:        {
       79:   73:            printf("handCount prior and handCount post are equal, test passed.\n");
call    0 returned 100%
        -:   74:        }
        -:   75:        else
        -:   76:        {
       21:   77:            printf("handCount prior and handCount post are not equal, test failed.\n");
call    0 returned 100%
        -:   78:        }
        -:   79:
        -:   80:
        -:   81:
        -:   82:    }
        1:   83:    printf (":::: ADVENTURER RANDOM TESTER END ::::\n");
call    0 returned 100%
        1:   84:	return 0;
        -:   85:}
